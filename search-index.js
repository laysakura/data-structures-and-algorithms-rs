var N=null,E="",T="t",U="u",searchIndex={};
var R=["data_structures_and_algorithms_rs","data_structures_and_algorithms_rs::binary_tree","data_structures_and_algorithms_rs::binary_search_tree","result","try_from","try_into","borrow","borrow_mut","type_id","typeid","binarysearchtree","binarytree","formatter","BinarySearchTree","BinaryTree"];
searchIndex["data_structures_and_algorithms_rs"]={"doc":E,"i":[[0,"binary_search_tree",R[0],E,N,N],[3,R[13],R[2],"二分探索木。 あるノードと等しい値は、必ず左側の子ノード以下に入ることとする。",N,N],[11,"new",E,"空の二分探索木をつくる。",0,[[],["self"]]],[11,"add",E,"二分探索木に val を追加する。 val は二分探索木に組み込まれる形で move される。",0,[[["self"],[T]]]],[11,"contains",E,"二分探索木に val が1つ以上含まれているかを返す。",0,[[[T],["self"]],["bool"]]],[11,"get_all_sorted",E,E,0,[[["self"]],[["vec"],[T]]]],[11,"get_range_sorted",E,E,0,[[[T],["self"]],[["vec"],[T]]]],[0,"binary_tree",R[0],E,N,N],[4,R[14],R[1],E,N,N],[13,"Nil",E,E,1,N],[13,"Node",E,E,1,N],[12,"val","data_structures_and_algorithms_rs::binary_tree::BinaryTree",E,1,N],[12,"left",E,E,1,N],[12,"right",E,E,1,N],[11,"replace",R[1],"self の Node または Nil を、 to に置き換える。 to は self に組み込まれる形で move…",1,[[["self"]]]],[11,"remove",E,"self の Node (または Nil) を Nil に置き換える。",1,[[["self"]]]],[14,"bin_tree",R[0],E,N,N],[11,"into",R[2],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[4],E,E,0,[[[U]],[R[3]]]],[11,R[5],E,E,0,[[],[R[3]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,"into",R[1],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[4],E,E,1,[[[U]],[R[3]]]],[11,R[5],E,E,1,[[],[R[3]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,"eq",R[2],E,0,[[["self"],[R[10]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[10]]],["bool"]]],[11,"eq",R[1],E,1,[[[R[11]],["self"]],["bool"]]],[11,"ne",E,E,1,[[[R[11]],["self"]],["bool"]]],[11,"fmt",R[2],E,0,[[["self"],[R[12]]],[R[3]]]],[11,"fmt",R[1],E,1,[[["self"],[R[12]]],[R[3]]]]],"p":[[3,R[13]],[4,R[14]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);